%YAML 1.2
---
# Copyright (C) 2016  Sergey Slipchenko

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

file_extensions:
  - js
  - js.flow

first_line_match: ^#!\s*/.*\b(node|js)$\n?
scope: source.js

variables:
  hexDigit: '[\da-fA-F]'
  identifier: '\b[_$A-Za-z][_$\w\d]*\b'
  capIdentifier: '\b[A-Z][_$\w\d]*\b'
  builtinFunctions: 'isFinite|isNaN|require'
  fn: \b(async\s+)?(function)\b
  arrowFn: (\basync\s)?\s*(\(([^(]*)\s*\)|{{identifier}})\s*(=>)
  keywords: \bif|switch|try|var|let|const|static|function|return|class|do|for|while|debugger|export|import|yield|of|type|declare\b
  # entities are stolen from https://dev.w3.org/html5/html-author/charref
  jsxEntities: 'Tab|NewLine|excl|quot|QUOT|num|dollar|percnt|amp|AMP|apos|lpar|rpar|ast|midast|plus|comma|period|sol|colon|semi|lt|LT|equals|gt|GT|quest|commat|lsqb|lbrack|bsol|rsqb|rbrack|Hat|lowbar|grave|DiacriticalGrave|lcub|lbrace|verbar|vert|VerticalLine|rcub|rbrace|nbsp|NonBreakingSpace|iexcl|cent|pound|curren|yen|brvbar|sect|Dot|die|DoubleDot|uml|copy|COPY|ordf|laquo|not|shy|reg|circledR|REG|macr|OverBar|strns|deg|plusmn|pm|PlusMinus|sup2|sup3|acute|DiacriticalAcute|micro|para|middot|centerdot|CenterDot|cedil|Cedilla|sup1|ordm|raquo|frac14|frac12|half|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|div|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|Amacr|amacr|Abreve|abreve|Aogon|aogon|Cacute|cacute|Ccirc|ccirc|Cdot|cdot|Ccaron|ccaron|Dcaron|dcaron|Dstrok|dstrok|Emacr|emacr|Edot|edot|Eogon|eogon|Ecaron|ecaron|Gcirc|gcirc|Gbreve|gbreve|Gdot|gdot|Gcedil|Hcirc|hcirc|Hstrok|hstrok|Itilde|itilde|Imacr|imacr|Iogon|iogon|Idot|imath|inodot|IJlig|ijlig|Jcirc|jcirc|Kcedil|kcedil|kgreen|Lacute|lacute|Lcedil|lcedil|Lcaron|lcaron|Lmidot|lmidot|Lstrok|lstrok|Nacute|nacute|Ncedil|ncedil|Ncaron|ncaron|napos|ENG|eng|Omacr|omacr|Odblac|odblac|OElig|oelig|Racute|racute|Rcedil|rcedil|Rcaron|rcaron|Sacute|sacute|Scirc|scirc|Scedil|scedil|Scaron|scaron|Tcedil|tcedil|Tcaron|tcaron|Tstrok|tstrok|Utilde|utilde|Umacr|umacr|Ubreve|ubreve|Uring|uring|Udblac|udblac|Uogon|uogon|Wcirc|wcirc|Ycirc|ycirc|Yuml|Zacute|zacute|Zdot|zdot|Zcaron|zcaron|fnof|imped|gacute|jmath|circ|caron|Hacek|breve|Breve|dot|DiacriticalDot|ring|ogon|tilde|DiacriticalTilde|dblac|DiacriticalDoubleAcute|DownBreve|UnderBar|Alpha|Beta|Gamma|Delta|Epsilon|Zeta|Eta|Theta|Iota|Kappa|Lambda|Mu|Nu|Xi|Omicron|Pi|Rho|Sigma|Tau|Upsilon|Phi|Chi|Psi|Omega|alpha|beta|gamma|delta|epsiv|varepsilon|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigmav|varsigma|sigmaf|sigma|tau|upsi|upsilon|phi|phiv|varphi|chi|psi|omega|thetav|vartheta|thetasym|Upsi|upsih|straightphi|piv|varpi|Gammad|gammad|digamma|kappav|varkappa|rhov|varrho|epsi|straightepsilon|bepsi|backepsilon|IOcy|DJcy|GJcy|Jukcy|DScy|Iukcy|YIcy|Jsercy|LJcy|NJcy|TSHcy|KJcy|Ubrcy|DZcy|Acy|Bcy|Vcy|Gcy|Dcy|IEcy|ZHcy|Zcy|Icy|Jcy|Kcy|Lcy|Mcy|Ncy|Ocy|Pcy|Rcy|Scy|Tcy|Ucy|Fcy|KHcy|TScy|CHcy|SHcy|SHCHcy|HARDcy|Ycy|SOFTcy|Ecy|YUcy|YAcy|acy|bcy|vcy|gcy|dcy|iecy|zhcy|zcy|icy|jcy|kcy|lcy|mcy|ncy|ocy|pcy|rcy|scy|tcy|ucy|fcy|khcy|tscy|chcy|shcy|shchcy|hardcy|ycy|softcy|ecy|yucy|yacy|iocy|djcy|gjcy|jukcy|dscy|iukcy|yicy|jsercy|ljcy|njcy|tshcy|kjcy|ubrcy|dzcy|ensp|emsp|emsp13|emsp14|numsp|puncsp|thinsp|ThinSpace|hairsp|VeryThinSpace|ZeroWidthSpace|NegativeVeryThinSpace|NegativeThinSpace|NegativeMediumSpace|NegativeThickSpace|zwnj|zwj|lrm|rlm|hyphen|dash|ndash|mdash|horbar|Verbar|Vert|lsquo|OpenCurlyQuote|rsquo|rsquor|CloseCurlyQuote|lsquor|sbquo|ldquo|OpenCurlyDoubleQuote|rdquo|rdquor|CloseCurlyDoubleQuote|ldquor|bdquo|dagger|Dagger|ddagger|bull|bullet|nldr|hellip|mldr|permil|pertenk|prime|Prime|tprime|bprime|backprime|lsaquo|rsaquo|oline|caret|hybull|frasl|bsemi|qprime|MediumSpace|NoBreak|ApplyFunction|af|InvisibleTimes|it|InvisibleComma|ic|euro|tdot|TripleDot|DotDot|Copf|complexes|incare|gscr|hamilt|HilbertSpace|Hscr|Hfr|Poincareplane|quaternions|Hopf|planckh|planck|hbar|plankv|hslash|Iscr|imagline|image|Im|imagpart|Ifr|Lscr|lagran|Laplacetrf|ell|Nopf|naturals|numero|copysr|weierp|wp|Popf|primes|rationals|Qopf|Rscr|realine|real|Re|realpart|Rfr|reals|Ropf|rx|trade|TRADE|integers|Zopf|ohm|mho|Zfr|zeetrf|iiota|angst|bernou|Bernoullis|Bscr|Cfr|Cayleys|escr|Escr|expectation|Fscr|Fouriertrf|phmmat|Mellintrf|Mscr|order|orderof|oscr|alefsym|aleph|beth|gimel|daleth|CapitalDifferentialD|DD|DifferentialD|dd|ExponentialE|exponentiale|ee|ImaginaryI|ii|frac13|frac23|frac15|frac25|frac35|frac45|frac16|frac56|frac18|frac38|frac58|frac78|larr|leftarrow|LeftArrow|slarr|ShortLeftArrow|uarr|uparrow|UpArrow|ShortUpArrow|rarr|rightarrow|RightArrow|srarr|ShortRightArrow|darr|downarrow|DownArrow|ShortDownArrow|harr|leftrightarrow|LeftRightArrow|varr|updownarrow|UpDownArrow|nwarr|UpperLeftArrow|nwarrow|nearr|UpperRightArrow|nearrow|searr|searrow|LowerRightArrow|swarr|swarrow|LowerLeftArrow|nlarr|nleftarrow|nrarr|nrightarrow|rarrw|rightsquigarrow|Larr|twoheadleftarrow|Uarr|Rarr|twoheadrightarrow|Darr|larrtl|leftarrowtail|rarrtl|rightarrowtail|LeftTeeArrow|mapstoleft|UpTeeArrow|mapstoup|map|RightTeeArrow|mapsto|DownTeeArrow|mapstodown|larrhk|hookleftarrow|rarrhk|hookrightarrow|larrlp|looparrowleft|rarrlp|looparrowright|harrw|leftrightsquigarrow|nharr|nleftrightarrow|lsh|Lsh|rsh|Rsh|ldsh|rdsh|crarr|cularr|curvearrowleft|curarr|curvearrowright|olarr|circlearrowleft|orarr|circlearrowright|lharu|LeftVector|leftharpoonup|lhard|leftharpoondown|DownLeftVector|uharr|upharpoonright|RightUpVector|uharl|upharpoonleft|LeftUpVector|rharu|RightVector|rightharpoonup|rhard|rightharpoondown|DownRightVector|dharr|RightDownVector|downharpoonright|dharl|LeftDownVector|downharpoonleft|rlarr|rightleftarrows|RightArrowLeftArrow|udarr|UpArrowDownArrow|lrarr|leftrightarrows|LeftArrowRightArrow|llarr|leftleftarrows|uuarr|upuparrows|rrarr|rightrightarrows|ddarr|downdownarrows|lrhar|ReverseEquilibrium|leftrightharpoons|rlhar|rightleftharpoons|Equilibrium|nlArr|nLeftarrow|nhArr|nLeftrightarrow|nrArr|nRightarrow|lArr|Leftarrow|DoubleLeftArrow|uArr|Uparrow|DoubleUpArrow|rArr|Rightarrow|Implies|DoubleRightArrow|dArr|Downarrow|DoubleDownArrow|hArr|Leftrightarrow|DoubleLeftRightArrow|iff|vArr|Updownarrow|DoubleUpDownArrow|nwArr|neArr|seArr|swArr|lAarr|Lleftarrow|rAarr|Rrightarrow|zigrarr|larrb|LeftArrowBar|rarrb|RightArrowBar|duarr|DownArrowUpArrow|loarr|roarr|hoarr|forall|ForAll|comp|complement|part|PartialD|exist|Exists|nexist|NotExists|nexists|empty|emptyset|emptyv|varnothing|nabla|Del|isin|isinv|Element|in|notin|NotElement|notinva|niv|ReverseElement|ni|SuchThat|notni|notniva|NotReverseElement|prod|Product|coprod|Coproduct|sum|Sum|minus|mnplus|mp|MinusPlus|plusdo|dotplus|setmn|setminus|Backslash|ssetmn|smallsetminus|lowast|compfn|SmallCircle|radic|Sqrt|prop|propto|Proportional|vprop|varpropto|infin|angrt|ang|angle|angmsd|measuredangle|angsph|mid|VerticalBar|smid|shortmid|nmid|NotVerticalBar|nsmid|nshortmid|par|parallel|DoubleVerticalBar|spar|shortparallel|npar|nparallel|NotDoubleVerticalBar|nspar|nshortparallel|and|wedge|or|vee|cap|cup|int|Integral|Int|tint|iiint|conint|oint|ContourIntegral|Conint|DoubleContourIntegral|Cconint|cwint|cwconint|ClockwiseContourIntegral|awconint|CounterClockwiseContourIntegral|there4|therefore|Therefore|becaus|because|Because|ratio|Colon|Proportion|minusd|dotminus|mDDot|homtht|sim|Tilde|thksim|thicksim|bsim|backsim|ac|mstpos|acd|wreath|VerticalTilde|wr|nsim|NotTilde|esim|EqualTilde|eqsim|sime|TildeEqual|simeq|nsime|nsimeq|NotTildeEqual|cong|TildeFullEqual|simne|ncong|NotTildeFullEqual|asymp|ap|TildeTilde|approx|thkap|thickapprox|nap|NotTildeTilde|napprox|ape|approxeq|apid|bcong|backcong|asympeq|CupCap|bump|HumpDownHump|Bumpeq|bumpe|HumpEqual|bumpeq|esdot|DotEqual|doteq|eDot|doteqdot|efDot|fallingdotseq|erDot|risingdotseq|colone|coloneq|Assign|ecolon|eqcolon|ecir|eqcirc|cire|circeq|wedgeq|veeeq|trie|triangleq|equest|questeq|ne|NotEqual|equiv|Congruent|nequiv|NotCongruent|le|leq|ge|GreaterEqual|geq|lE|LessFullEqual|leqq|gE|GreaterFullEqual|geqq|lnE|lneqq|gnE|gneqq|Lt|NestedLessLess|ll|Gt|NestedGreaterGreater|gg|twixt|between|NotCupCap|nlt|NotLess|nless|ngt|NotGreater|ngtr|nle|NotLessEqual|nleq|nge|NotGreaterEqual|ngeq|lsim|LessTilde|lesssim|gsim|gtrsim|GreaterTilde|nlsim|NotLessTilde|ngsim|NotGreaterTilde|lg|lessgtr|LessGreater|gl|gtrless|GreaterLess|ntlg|NotLessGreater|ntgl|NotGreaterLess|pr|Precedes|prec|sc|Succeeds|succ|prcue|PrecedesSlantEqual|preccurlyeq|sccue|SucceedsSlantEqual|succcurlyeq|prsim|precsim|PrecedesTilde|scsim|succsim|SucceedsTilde|npr|nprec|NotPrecedes|nsc|nsucc|NotSucceeds|sub|subset|sup|supset|Superset|nsub|nsup|sube|SubsetEqual|subseteq|supe|supseteq|SupersetEqual|nsube|nsubseteq|NotSubsetEqual|nsupe|nsupseteq|NotSupersetEqual|subne|subsetneq|supne|supsetneq|cupdot|uplus|UnionPlus|sqsub|SquareSubset|sqsubset|sqsup|SquareSuperset|sqsupset|sqsube|SquareSubsetEqual|sqsubseteq|sqsupe|SquareSupersetEqual|sqsupseteq|sqcap|SquareIntersection|sqcup|SquareUnion|oplus|CirclePlus|ominus|CircleMinus|otimes|CircleTimes|osol|odot|CircleDot|ocir|circledcirc|oast|circledast|odash|circleddash|plusb|boxplus|minusb|boxminus|timesb|boxtimes|sdotb|dotsquare|vdash|RightTee|dashv|LeftTee|top|DownTee|bottom|bot|perp|UpTee|models|vDash|DoubleRightTee|Vdash|Vvdash|VDash|nvdash|nvDash|nVdash|nVDash|prurel|vltri|vartriangleleft|LeftTriangle|vrtri|vartriangleright|RightTriangle|ltrie|trianglelefteq|LeftTriangleEqual|rtrie|trianglerighteq|RightTriangleEqual|origof|imof|mumap|multimap|hercon|intcal|intercal|veebar|barvee|angrtvb|lrtri|xwedge|Wedge|bigwedge|xvee|Vee|bigvee|xcap|Intersection|bigcap|xcup|Union|bigcup|diam|diamond|Diamond|sdot|sstarf|Star|divonx|divideontimes|bowtie|ltimes|rtimes|lthree|leftthreetimes|rthree|rightthreetimes|bsime|backsimeq|cuvee|curlyvee|cuwed|curlywedge|Sub|Subset|Sup|Supset|Cap|Cup|fork|pitchfork|epar|ltdot|lessdot|gtdot|gtrdot|Ll|Gg|ggg|leg|LessEqualGreater|lesseqgtr|gel|gtreqless|GreaterEqualLess|cuepr|curlyeqprec|cuesc|curlyeqsucc|nprcue|NotPrecedesSlantEqual|nsccue|NotSucceedsSlantEqual|nsqsube|NotSquareSubsetEqual|nsqsupe|NotSquareSupersetEqual|lnsim|gnsim|prnsim|precnsim|scnsim|succnsim|nltri|ntriangleleft|NotLeftTriangle|nrtri|ntriangleright|NotRightTriangle|nltrie|ntrianglelefteq|NotLeftTriangleEqual|nrtrie|ntrianglerighteq|NotRightTriangleEqual|vellip|ctdot|utdot|dtdot|disin|isinsv|isins|isindot|notinvc|notinvb|isinE|nisd|xnis|nis|notnivc|notnivb|barwed|barwedge|Barwed|doublebarwedge|lceil|LeftCeiling|rceil|RightCeiling|lfloor|LeftFloor|rfloor|RightFloor|drcrop|dlcrop|urcrop|ulcrop|bnot|profline|profsurf|telrec|target|ulcorn|ulcorner|urcorn|urcorner|dlcorn|llcorner|drcorn|lrcorner|frown|sfrown|smile|ssmile|cylcty|profalar|topbot|ovbar|solbar|angzarr|lmoust|lmoustache|rmoust|rmoustache|tbrk|OverBracket|bbrk|UnderBracket|bbrktbrk|OverParenthesis|UnderParenthesis|OverBrace|UnderBrace|trpezium|elinters|blank|oS|circledS|boxh|HorizontalLine|boxv|boxdr|boxdl|boxur|boxul|boxvr|boxvl|boxhd|boxhu|boxvh|boxH|boxV|boxdR|boxDr|boxDR|boxdL|boxDl|boxDL|boxuR|boxUr|boxUR|boxuL|boxUl|boxUL|boxvR|boxVr|boxVR|boxvL|boxVl|boxVL|boxHd|boxhD|boxHD|boxHu|boxhU|boxHU|boxvH|boxVh|boxVH|uhblk|lhblk|block|blk14|blk12|blk34|squ|square|Square|squf|squarf|blacksquare|FilledVerySmallSquare|EmptyVerySmallSquare|rect|marker|fltns|xutri|bigtriangleup|utrif|blacktriangle|utri|triangle|rtrif|blacktriangleright|rtri|triangleright|xdtri|bigtriangledown|dtrif|blacktriangledown|dtri|triangledown|ltrif|blacktriangleleft|ltri|triangleleft|loz|lozenge|cir|tridot|xcirc|bigcirc|ultri|urtri|lltri|EmptySmallSquare|FilledSmallSquare|starf|bigstar|star|phone|female|male|spades|spadesuit|clubs|clubsuit|hearts|heartsuit|diams|diamondsuit|sung|flat|natur|natural|sharp|check|checkmark|cross|malt|maltese|sext|VerticalSeparator|lbbrk|rbbrk|lobrk|LeftDoubleBracket|robrk|RightDoubleBracket|lang|LeftAngleBracket|langle|rang|RightAngleBracket|rangle|Lang|Rang|loang|roang|xlarr|longleftarrow|LongLeftArrow|xrarr|longrightarrow|LongRightArrow|xharr|longleftrightarrow|LongLeftRightArrow|xlArr|Longleftarrow|DoubleLongLeftArrow|xrArr|Longrightarrow|DoubleLongRightArrow|xhArr|Longleftrightarrow|DoubleLongLeftRightArrow|xmap|longmapsto|dzigrarr|nvlArr|nvrArr|nvHarr|Map|lbarr|rbarr|bkarow|lBarr|rBarr|dbkarow|RBarr|drbkarow|DDotrahd|UpArrowBar|DownArrowBar|Rarrtl|latail|ratail|lAtail|rAtail|larrfs|rarrfs|larrbfs|rarrbfs|nwarhk|nearhk|searhk|hksearow|swarhk|hkswarow|nwnear|nesear|toea|seswar|tosa|swnwar|rarrc|cudarrr|ldca|rdca|cudarrl|larrpl|curarrm|cularrp|rarrpl|harrcir|Uarrocir|lurdshar|ldrushar|LeftRightVector|RightUpDownVector|DownLeftRightVector|LeftUpDownVector|LeftVectorBar|RightVectorBar|RightUpVectorBar|RightDownVectorBar|DownLeftVectorBar|DownRightVectorBar|LeftUpVectorBar|LeftDownVectorBar|LeftTeeVector|RightTeeVector|RightUpTeeVector|RightDownTeeVector|DownLeftTeeVector|DownRightTeeVector|LeftUpTeeVector|LeftDownTeeVector|lHar|uHar|rHar|dHar|luruhar|ldrdhar|ruluhar|rdldhar|lharul|llhard|rharul|lrhard|udhar|UpEquilibrium|duhar|ReverseUpEquilibrium|RoundImplies|erarr|simrarr|larrsim|rarrsim|rarrap|ltlarr|gtrarr|subrarr|suplarr|lfisht|rfisht|ufisht|dfisht|lopar|ropar|lbrke|rbrke|lbrkslu|rbrksld|lbrksld|rbrkslu|langd|rangd|lparlt|rpargt|gtlPar|ltrPar|vzigzag|vangrt|angrtvbd|ange|range|dwangle|uwangle|angmsdaa|angmsdab|angmsdac|angmsdad|angmsdae|angmsdaf|angmsdag|angmsdah|bemptyv|demptyv|cemptyv|raemptyv|laemptyv|ohbar|omid|opar|operp|olcross|odsold|olcir|ofcir|olt|ogt|cirscir|cirE|solb|bsolb|boxbox|trisb|rtriltri|LeftTriangleBar|RightTriangleBar|race|iinfin|infintie|nvinfin|eparsl|smeparsl|eqvparsl|lozf|blacklozenge|RuleDelayed|dsol|xodot|bigodot|xoplus|bigoplus|xotime|bigotimes|xuplus|biguplus|xsqcup|bigsqcup|qint|iiiint|fpartint|cirfnint|awint|rppolint|scpolint|npolint|pointint|quatint|intlarhk|pluscir|plusacir|simplus|plusdu|plussim|plustwo|mcomma|minusdu|loplus|roplus|Cross|timesd|timesbar|smashp|lotimes|rotimes|otimesas|Otimes|odiv|triplus|triminus|tritime|iprod|intprod|amalg|capdot|ncup|ncap|capand|cupor|cupcap|capcup|cupbrcap|capbrcup|cupcup|capcap|ccups|ccaps|ccupssm|And|Or|andand|oror|orslope|andslope|andv|orv|andd|ord|wedbar|sdote|simdot|congdot|easter|apacir|apE|eplus|pluse|Esim|Colone|Equal|eDDot|ddotseq|equivDD|ltcir|gtcir|ltquest|gtquest|les|LessSlantEqual|leqslant|ges|GreaterSlantEqual|geqslant|lesdot|gesdot|lesdoto|gesdoto|lesdotor|gesdotol|lap|lessapprox|gap|gtrapprox|lne|lneq|gne|gneq|lnap|lnapprox|gnap|gnapprox|lEg|lesseqqgtr|gEl|gtreqqless|lsime|gsime|lsimg|gsiml|lgE|glE|lesges|gesles|els|eqslantless|egs|eqslantgtr|elsdot|egsdot|el|eg|siml|simg|simlE|simgE|LessLess|GreaterGreater|glj|gla|ltcc|gtcc|lescc|gescc|smt|lat|smte|late|bumpE|pre|preceq|PrecedesEqual|sce|succeq|SucceedsEqual|prE|scE|prnE|precneqq|scnE|succneqq|prap|precapprox|scap|succapprox|prnap|precnapprox|scnap|succnapprox|Pr|Sc|subdot|supdot|subplus|supplus|submult|supmult|subedot|supedot|subE|subseteqq|supE|supseteqq|subsim|supsim|subnE|subsetneqq|supnE|supsetneqq|csub|csup|csube|csupe|subsup|supsub|subsub|supsup|suphsub|supdsub|forkv|topfork|mlcp|Dashv|DoubleLeftTee|Vdashl|Barv|vBar|vBarv|Vbar|Not|bNot|rnmid|cirmid|midcir|topcir|nhpar|parsim|parsl|fflig|filig|fllig|ffilig|ffllig|Ascr|Cscr|Dscr|Gscr|Jscr|Kscr|Nscr|Oscr|Pscr|Qscr|Sscr|Tscr|Uscr|Vscr|Wscr|Xscr|Yscr|Zscr|ascr|bscr|cscr|dscr|fscr|hscr|iscr|jscr|kscr|lscr|mscr|nscr|pscr|qscr|rscr|sscr|tscr|uscr|vscr|wscr|xscr|yscr|zscr|Afr|Bfr|Dfr|Efr|Ffr|Gfr|Jfr|Kfr|Lfr|Mfr|Nfr|Ofr|Pfr|Qfr|Sfr|Tfr|Ufr|Vfr|Wfr|Xfr|Yfr|afr|bfr|cfr|dfr|efr|ffr|gfr|hfr|ifr|jfr|kfr|lfr|mfr|nfr|ofr|pfr|qfr|rfr|sfr|tfr|ufr|vfr|wfr|xfr|yfr|zfr|Aopf|Bopf|Dopf|Eopf|Fopf|Gopf|Iopf|Jopf|Kopf|Lopf|Mopf|Oopf|Sopf|Topf|Uopf|Vopf|Wopf|Xopf|Yopf|aopf|bopf|copf|dopf|eopf|fopf|gopf|hopf|iopf|jopf|kopf|lopf|mopf|nopf|oopf|popf|qopf|ropf|sopf|topf|uopf|vopf|wopf|xopf|yopf|zopf'
  flowBuiltinTypes: \bnumber|string|boolean|void|null|Function|Object\b

contexts:
  prototype:
    - match: /\*
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.block.js
        - match: \*/
          scope: punctuation.definition.comment.js
          pop: true

    - match: //
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.line.js
        - match: $
          pop: true

  main:
    - match: "^.{999,}" # ignore lines longer than 999 symbols
    - include: statement

  expression:
    - include: arrow-function-definition
    - include: operator-without-preceding-operand
    - include: styled-components
    - include: jsx
    - include: literal
    - include: function-call
    - include: builtin
    - match: \.
      scope: punctuation.accessor.js
      push:
        - include: function-call-with-set

        - match: '((prototype)|{{identifier}})'
          scope: variable.other.member.js
          captures:
            2: variable.language.js
          set: operator

    - match: '{{capIdentifier}}'
      scope: entity.name.class.js
      push: operator
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      push: operator
    - match: ','
      scope: 'keyword.operator.js'

  statement:
    - include: import-statement
    - include: export-statement
    - include: block-statement
    - include: flow-type-declaration
    - include: variable-declaration
    - include: function-declaration
    - include: return-statement
    - include: if-statement
    - include: switch-statement
    - include: for-statement
    - include: while-statement
    - include: try-statement
    - match: \b(break|continue)\b
      scope: keyword.control.js
    - include: expression
    - include: semicolon

  semicolon:
    - match: ;
      scope: punctuation.terminator.js

  styled-components:
    - match: (?<!\.)\b(injectGlobal|keyframes)\s*(`)
      captures:
        1: variable.function.tagged-template.js
        2: punctuation.definition.string.template.begin.js
      push:
        - meta_scope: meta.styled-components.js
        - meta_content_scope: source.css.embedded.js
        - match: "`"
          captures:
            0: punctuation.definition.string.template.end.js
          pop: true
        - include: scope:source.js.css
    - match: '(?<!\.)\b(styled)(\.)([_$a-zA-Z][$\w]*)\s*(`)'
      captures:
        1: variable.other.object.js
        2: punctuation.accessor.js
        3: variable.function.tagged-template.js
        4: punctuation.definition.string.template.begin.js
      push:
        - meta_scope: meta.styled-components.js
        - meta_content_scope: source.css.embedded.js
        - match: "`"
          captures:
            0: punctuation.definition.string.template.end.js
          pop: true
        - include: scope:source.js.css
    - match: '(?<!\.)\b(styled)\s*(?=(\((?>(?>[^()]+)|\g<-1>)*\))\s*`)'
      captures:
        1: meta.function-call.with-arguments.js variable.function.js
      push:
        - meta_scope: meta.styled-components.js
        - match: (?<=`)
          captures:
            1: meta.function-call.with-arguments.js variable.function.js
          pop: true
        - match: \(
          captures:
            0: punctuation.definition.group.begin.js
          push:
            - meta_scope: meta.function-call.with-arguments.js meta.group.js
            - match: \)
              captures:
                0: punctuation.definition.group.end.js
              pop: true
            - include: expression
        - match: "`"
          captures:
            0: punctuation.definition.string.template.begin.js
          push:
            - meta_content_scope: source.css.embedded.js
            - match: "`"
              captures:
                0: punctuation.definition.string.template.end.js
              pop: true
            - include: scope:source.js.css

  jsx:
    - match: (<)({{identifier}}(\.{{identifier}})*)
      captures:
        1: punctuation.definition.generic.begin.js
        2: entity.name.tag.js

      push:
        - meta_scope: meta.tag.js

        - match: />
          scope: punctuation.definition.generic.end.js
          pop: true

        - match: '>'
          scope: meta.tag.js punctuation.definition.generic.end.js
          push:
            - meta_include_prototype: false
            - meta_content_scope: text.xml.js
            - clear_scopes: true

            - match: '(&)({{jsxEntities}}|#\d{2}|#x[\da-fA-F]{5})(;)'
              captures:
                1: punctuation.definition.keyword.js
                2: constant.character.js
                3: punctuation.definition.keyword.js

            - match: \{
              scope: punctuation.definition.generic.begin.js
              push:
                - match: \}
                  scope: punctuation.definition.generic.end.js
                  pop: true

                - include: expression

            - match: (?=</{{identifier}}(\.{{identifier}})*>)
              pop: true

            - include: jsx

        - match: (</)(\2)(>)
          captures:
            1: punctuation.definition.generic.begin.js
            2: entity.name.tag.js
            3: punctuation.definition.generic.end.js
          pop: true

        - match: '{{identifier}}'
          scope: entity.other.attribute-name.js

        - match: =
          scope: punctuation.separator.js
          push:
            - match: (')
              scope: punctuation.definition.string.js
              set:
                - meta_content_scope: string.quoted.single.js
                - match: (')
                  scope: punctuation.definition.string.js
                  pop: true

            - match: (")
              scope: punctuation.definition.string.js
              set:
                - meta_content_scope: string.quoted.double.js
                - match: (")
                  scope: punctuation.definition.string.js
                  pop: true

            - match: \{
              scope: punctuation.definition.generic.begin.js
              set:
                - match: \}
                  scope: punctuation.definition.generic.end.js
                  pop: true

                - include: expression

  operator-without-preceding-operand:
    - match: \(
      scope: punctuation.section.parens.begin.js
      push:
        - meta_content_scope: meta.parens.js
        - include: expression

        - match: \)
          scope: punctuation.section.parens.end.js
          set: operator

    - match: '!'
      scope: keyword.operator.logical.js

    - match: \b(delete|void|typeof|new)\b
      scope: keyword.other.js

    - match: \+|-
      scope: keyword.operator.arithmetic.js

    - match: '~'
      scope: keyword.operator.bitwise.js

  operator:
    - match: '&&|\|\||((<|>)=?)|((=|!)==?)'
      scope: keyword.operator.logical.js
      pop: true

    - match: (\+|-|\*|\/|%|&|\|)=
      scope: keyword.operator.assignment.js
      pop: true

    - match: =
      scope: keyword.operator.assignment.js
      set:
        - include: expression-stop
        - include: expression
        - match: (?=\S)
          pop: true

    - match: \+|-|\*|/|%
      scope: keyword.operator.arithmetic.js
      pop: true

    - match: '&|\|'
      scope: keyword.operator.bitwise.js
      pop: true

    - match: (?=\S)
      pop: true

  literal:
    - include: string-literal-single
    - include: string-literal-double
    - include: template-literal
    - include: numeric-literal
    - include: boolean-literal
    - include: array-literal
    - include: class-definition
    - include: object-literal

  string-literal:
    - match: \\(r|n|t|u{{hexDigit}}{4})
      scope: constant.character.escape.js

  string-literal-no-newline:
    - match: '[^\\](\n)'
      captures:
        1: invalid.illegal.js

  string-literal-single:
    - match: (')
      scope: punctuation.definition.string.js
      push:
        - meta_include_prototype: false
        - meta_content_scope: string.quoted.single.js
        - include: string-literal

        - match: (')
          scope: punctuation.definition.string.js
          set: operator

        - include: string-literal-no-newline

  string-literal-double:
    - match: (")
      scope: punctuation.definition.string.js
      push:
        - meta_include_prototype: false
        - meta_content_scope: string.quoted.double.js
        - include: string-literal

        - match: (")
          scope: punctuation.definition.string.js
          set: operator

        - include: string-literal-no-newline

  template-literal:
    - match: (`)
      scope: punctuation.definition.string.js
      push:
        - meta_include_prototype: false
        - meta_content_scope: string.interpolated.js
        - include: string-literal

        - match: (`)
          scope: punctuation.definition.string.js
          set: operator

        - match: \$\{
          scope: punctuation.section.embedded.js
          push:
            - clear_scopes: 1
            - include: expression
            - match: \}
              scope: punctuation.section.embedded.js
              pop: true

  numeric-literal:
    - match: '0x{{hexDigit}}+'
      scope: constant.numeric.hex.js
      push: operator

    - match: '0\d+'
      scope: constant.numeric.octal.js
      push: operator

    - match: '-?(\d+\.?\d*|\d*\.?\d+)(e[-+](\d+))?'
      scope: constant.numeric.js
      push: operator

  boolean-literal:
    - match: \b(true|false)\b
      scope: constant.language.js
      push: operator

  array-literal:
    - match: \[
      scope: punctuation.section.brackets.begin.js
      push:
        - meta_content_scope: meta.brackets.js

        - match: \,
          scope: punctuation.separator.js

        - include: expression

        - match: \]
          scope: punctuation.section.brackets.end.js
          pop: true

  class-property-value-stop:
    - match: ';|(?=}|\S)'
      scope: punctuation.separator.js
      pop: true

  class-property-value:
    - include: function-declaration-after-name-with-push

    - match: =
      scope: keyword.operator.assignment.js
      set:
        - include: function-declaration
        - include: class-property-value-stop
        - include: expression

    - include: class-property-value-stop

  class-body:
    - meta_scope: meta.class.js meta.braces.js

    - match: \}
      scope: punctuation.section.braces.end.js
      pop: true

    - match: '((constructor)|({{identifier}}))(?=\s*\()'
      scope: variable.other.member.js
      captures:
        2: entity.name.function.constructor.js
        3: entity.name.function.js
      push: class-property-value

    - match: '({{identifier}})(?=\s*=\s*({{fn}}|{{arrowFn}}))'
      scope: variable.other.member.js
      captures:
        1: entity.name.function.js
      push: class-property-value

    - match: '('')(.*?)('')(?=\s*\()'
      scope: variable.other.member.js string.quoted.single.js
      captures:
        1: punctuation.definition.string.js
        2: entity.name.function.js
        3: punctuation.definition.string.js
      push: class-property-value

    - match: '(")(.*?)(")(?=\s*\()'
      scope: variable.other.member.js string.quoted.double.js
      captures:
        1: punctuation.definition.string.js
        2: entity.name.function.js
        3: punctuation.definition.string.js
      push: class-property-value

    - match: '{{identifier}}'
      scope: variable.other.member.js
      push: class-property-value

    - match: \'
      scope: punctuation.definition.string.js
      push:
        - meta_scope: variable.other.member.js
        - meta_include_prototype: false
        - meta_content_scope: string.quoted.single.js
        - include: string-literal

        - match: \'
          scope: punctuation.definition.string.js
          set: class-property-value

        - include: string-literal-no-newline

    - match: \"
      scope: punctuation.definition.string.js
      push:
        - meta_scope: variable.other.member.js
        - meta_include_prototype: false
        - meta_content_scope: string.quoted.double.js
        - include: string-literal

        - match: \"
          scope: punctuation.definition.string.js
          set: class-property-value

        - include: string-literal-no-newline

    - match: \[
      scope: punctuation.section.brackets.begin.js
      push:
        - meta_scope: variable.other.member.js
        - meta_include_prototype: false
        - meta_content_scope: meta.brackets.js

        - match: \]
          scope: punctuation.section.brackets.end.js
          set: class-property-value

        - include: expression

  class-definition:
    - match: \bclass\b
      scope: storage.type.js
      push:
        - meta_scope: meta.class.js
        - match: '{{capIdentifier}}'
          scope: entity.name.class.js

        - match: \bextends\b
          scope: storage.modifier.js
          set:
            - meta_content_scope: entity.other.inherited-class.js
            - match: \{
              scope: punctuation.section.braces.begin.js
              set: class-body
            - include: expression

        - match: \{
          scope: punctuation.section.braces.begin.js
          set: class-body

  object-literal-key-value-stop:
    - match: '(?=\S)'
      pop: true

  object-literal-key-value:
    - include: function-declaration-after-name-with-push

    - match: ':'
      scope: punctuation.separator.js
      set:
        - match: ','
          scope: punctuation.separator.js
          pop: true

        - include: function-declaration
        - include: expression
        - include: object-literal-key-value-stop

    - match: ','
      scope: punctuation.separator.js
      pop: true

    - include: object-literal-key-value-stop

  object-literal:
    - match: \{
      scope: punctuation.section.braces.begin.js
      push:
        - meta_content_scope: meta.braces.js

        - match: '({{identifier}})(?=\s*:\s*({{fn}}|{{arrowFn}}))'
          scope: variable.other.member.js string.unquoted.js
          captures:
            1: entity.name.function.js
          push: object-literal-key-value

        - match: '({{identifier}})(?=\s*\()'
          scope: variable.other.member.js string.unquoted.js
          captures:
            1: entity.name.function.js
          push: object-literal-key-value

        - match: '('')(.*?)('')(?=\s*\()'
          scope: variable.other.member.js string.quoted.single.js
          captures:
            1: punctuation.definition.string.js
            2: entity.name.function.js
            3: punctuation.definition.string.js
          push: object-literal-key-value

        - match: '(")(.*?)(")(?=\s*\()'
          scope: variable.other.member.js string.quoted.double.js
          captures:
            1: punctuation.definition.string.js
            2: entity.name.function.js
            3: punctuation.definition.string.js
          push: object-literal-key-value

        - match: '{{identifier}}'
          scope: variable.other.member.js string.unquoted.js
          push: object-literal-key-value

        - match: \'
          scope: punctuation.definition.string.js
          push:
            - meta_scope: variable.other.member.js
            - meta_include_prototype: false
            - meta_content_scope: string.quoted.single.js
            - include: string-literal

            - match: \'
              scope: punctuation.definition.string.js
              set: object-literal-key-value

            - include: string-literal-no-newline

        - match: \"
          scope: punctuation.definition.string.js
          push:
            - meta_scope: variable.other.member.js
            - meta_include_prototype: false
            - meta_content_scope: string.quoted.double.js
            - include: string-literal

            - match: \"
              scope: punctuation.definition.string.js
              set: object-literal-key-value

            - include: string-literal-no-newline

        - match: \[
          scope: punctuation.section.brackets.begin.js
          push:
            - meta_scope: variable.other.member.js
            - meta_include_prototype: false
            - meta_content_scope: meta.brackets.js

            - match: \]
              scope: punctuation.section.brackets.end.js
              set: object-literal-key-value

            - include: expression

        - match: \}
          scope: punctuation.section.braces.end.js
          pop: true

  builtin:
    - match: \b(Infinity|NaN|null|undefined)\b
      scope: support.constant.js

    - match: \b(this|super)\b
      scope: variable.language.js

    - match: \b(Array|Object|Buffer)\b
      scope: support.class.js

    - match: '{{builtinFunctions}}'
      scope: support.function.js

    - match: \b(Math|console|window|global)\b
      scope: support.type.js

    - match: \b(exports|module)\b
      scope: support.module.js

  block-statement:
    - match: \{
      scope: punctuation.section.block.begin.js
      push:
        - meta_content_scope: meta.block.js
        - include: statement

        - match: \}
          scope: punctuation.section.block.end.js
          pop: true

  expression-stop:
    - match: (?=;)|(?={{keywords}}\b)
      pop: true

  arrow-function-definition:
    - match: '(?={{arrowFn}})'
      push:
        - meta_scope: meta.function.js

        - match: \basync\b
          scope: storage.modifier.js

        - match: \(
          scope: meta.function.js punctuation.section.parens.begin.js
          push:
            - meta_content_scope: meta.function.parameters.js meta.parens.js
            - clear_scopes: 1
            - include: function-parameter

            - match: \)
              scope: meta.function.js punctuation.section.parens.end.js
              pop: true

        - match: '{{identifier}}'
          scope: meta.function.parameters.js variable.parameter.js

        - match: =>
          scope: storage.type.js

          set:
            - meta_content_scope: meta.function.js
            - include: expression-stop

            - match: \{
              scope: punctuation.section.block.begin.js
              set:
                - meta_content_scope: meta.block.js meta.function.js
                - include: statement

                - match: \}
                  scope: punctuation.section.block.end.js
                  pop: true

            - include: expression

  variable-declaration-assignment:
    - match: =
      scope: keyword.operator.assignment.js
      push:
        - include: expression-stop

        - match: (?=,)
          pop: true

        - include: expression

  variable-declaration-recursive-readwrite:
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      set:
        - include: expression-stop
        - include: variable-declaration-assignment

        - match: ','
          scope: punctuation.separator.js
          set: variable-declaration-recursive-readwrite

  variable-declaration-recursive-constant:
    - match: '{{identifier}}'
      scope: variable.other.constant.js
      set:
        - include: expression-stop
        - include: variable-declaration-assignment

        - match: ','
          scope: punctuation.separator.js
          set: variable-declaration-recursive-constant

  variable-declaration:
    - match: \b(var|let|const)\s+({{identifier}})\s*(=)\s*(?={{arrowFn}})
      scope: meta.function.js
      captures:
        1: storage.type.js
        2: entity.name.function.js
        3: keyword.operator.assignment.js

    - match: \b(var|let)\b
      scope: storage.type.js
      push: variable-declaration-recursive-readwrite

    - match: \bconst\b
      scope: storage.type.js
      push: variable-declaration-recursive-constant

  function-parameter:
    - match: '{{identifier}}'
      scope: variable.parameter.js

    - match: ','
      scope: punctuation.separator.js

  function-declaration-after-name-with-push: # FIXME: This is really dirty, do not use it
    - match: \(
      scope: meta.function.js punctuation.section.parens.begin.js
      push:
        - meta_content_scope: meta.function.parameters.js meta.parens.js
        - clear_scopes: 1
        - include: function-parameter

        - match: \)
          scope: meta.function.js punctuation.section.parens.end.js
          pop: true

    - match: \{
      scope: punctuation.section.block.begin.js
      push:
        - meta_content_scope: meta.function.js meta.block.js
        - include: statement

        - match: \}
          scope: punctuation.section.block.end.js
          pop: true

  function-declaration-after-name:
    - match: \(
      scope: meta.function.js punctuation.section.parens.begin.js
      push:
        - meta_content_scope: meta.function.parameters.js meta.parens.js
        - clear_scopes: 1
        - include: function-parameter

        - match: \)
          scope: meta.function.js punctuation.section.parens.end.js
          pop: true

    - match: \{
      scope: punctuation.section.block.begin.js
      set:
        - meta_content_scope: meta.function.js meta.block.js
        - include: statement

        - match: \}
          scope: punctuation.section.block.end.js
          pop: true

  function-declaration:
    - match: '{{fn}}'
      captures:
        1: storage.modifier.js
        2: storage.type.js

      push:
        - meta_scope: meta.function.js

        - match: \*
          scope: storage.modifier.js

        - match: '{{capIdentifier}}'
          scope: entity.name.function.constructor.js entity.name.class.js

        - match: '{{identifier}}'
          scope: entity.name.function.js

        - include: function-declaration-after-name

  return-statement:
    - match: \breturn\b
      scope: keyword.control.js

  if-statement:
    - match: \bif\b
      scope: keyword.control.conditional.js
      push:
        - match: \(
          scope: punctuation.section.parens.begin.js
          set:
            - meta_content_scope: meta.parens.js
            - include: expression

            - match: \)
              scope: punctuation.section.parens.end.js
              pop: true

    - match: \belse\b
      scope: keyword.control.conditional.js

  switch-statement:
    - match: \bswitch\b
      scope: keyword.control.conditional.js
      push:
        - match: \(
          scope: punctuation.section.parens.begin.js
          push:
            - meta_content_scope: meta.parens.js
            - include: expression
            - match: \)
              scope: punctuation.section.parens.end.js
              pop: true

        - match: \{
          scope: punctuation.section.block.begin.js
          set:
            - meta_content_scope: meta.block.js

            - match: \b(case|default)\b
              scope: keyword.control.conditional.js
              push:
                - include: expression

                - match: ':'
                  scope: punctuation.terminator.js
                  set:
                    - match: \bbreak\b
                      scope: keyword.control.js
                      pop: true

                    - match: (?=\}|\b(case|default)\b)
                      pop: true

                    - include: statement

            - match: \}
              scope: punctuation.section.block.end.js
              pop: true

  for-statement:
    - match: \bfor\b
      scope: keyword.control.js
      push:
        - match: \(
          scope: punctuation.section.parens.begin.js
          push:
            - meta_content_scope: meta.parens.js

            - match: \bof\b
              scope: keyword.control.js

            - match: ;
              scope: punctuation.terminator.js
              push:
                - match: ;
                  scope: punctuation.terminator.js
                  set:
                    - match: (?=\))
                      pop: true

                    - include: expression

                - include: expression

            - match: \)
              scope: punctuation.section.parens.end.js
              pop: true

            - include: statement

        - include: statement

  while-statement:
    - match: \bwhile\b
      scope: keyword.control.js
      push:
        - match: \(
          scope: punctuation.section.parens.begin.js
          push:
            - meta_content_scope: meta.parens.js
            - include: expression
            - match: \)
              scope: punctuation.section.parens.end.js
              pop: true

        - include: statement

  catch-or-finally-block:
    - match: \{
      scope: punctuation.section.block.begin.js
      set:
        - meta_content_scope: meta.block.js

        - match: \}
          scope: punctuation.section.block.end.js
          pop: true

        - include: statement

  try-statement:
    - match: \btry\b
      scope: keyword.control.js
      push:
        - match: \{
          scope: punctuation.section.block.begin.js
          set:
            - meta_content_scope: meta.block.js

            - match: \}
              scope: punctuation.section.block.end.js
              set:
                - match: \bcatch\b
                  scope: keyword.control.js
                  push:
                    - match: \(
                      scope: punctuation.section.parens.begin.js
                      set:
                        - meta_content_scope: meta.block.js

                        - match: \)
                          scope: punctuation.section.parens.end.js
                          set: catch-or-finally-block

                        - match: '{{identifier}}'
                          scope: variable.other.readwrite.js

                - match: \bfinally\b
                  scope: keyword.control.js
                  set: catch-or-finally-block

                - match: (?=\S)
                  pop: true

            - include: statement

  function-call:
    - match: ({{capIdentifier}})\s*(\()|(({{builtinFunctions}})|({{identifier}}))\s*(\()
      captures:
        1: entity.name.class.js
        2: punctuation.section.parens.begin.js
        4: support.function.js
        5: variable.function.js
        6: punctuation.section.parens.begin.js
      push:
        - meta_scope: meta.function-call.js
        - meta_content_scope: meta.parens.js

        - match: ','
          scope: punctuation.separator.js

        - include: expression

        - match: \)
          scope: punctuation.section.parens.end.js
          set: operator

  function-call-with-set: # FIXME: This is really dirty, do not use it
    - match: ({{capIdentifier}})\s*(\()|(({{builtinFunctions}})|({{identifier}}))\s*(\()
      captures:
        1: entity.name.class.js
        2: punctuation.section.parens.begin.js
        4: support.function.js
        5: variable.function.js
        6: punctuation.section.parens.begin.js
      set:
        - meta_scope: meta.function-call.js
        - meta_content_scope: meta.parens.js

        - match: ','
          scope: punctuation.separator.js

        - include: expression

        - match: \)
          scope: punctuation.section.parens.end.js
          set: operator

  import-member-definition:
    - match: \bas\b
      scope: keyword.control.import.js

    - match: '{{identifier}}'
      scope: variable.other.constant.js

  import-statement:
    - match: \bimport\b
      scope: keyword.control.import.js
      push:
        - match: \'
          scope: punctuation.definition.string.js
          set:
            - meta_content_scope: string.quoted.single.js

            - match: \'
              scope: punctuation.definition.string.js
              pop: true

        - match: \"
          scope: punctuation.definition.string.js
          set:
            - meta_content_scope: string.quoted.double.js

            - match: \"
              scope: punctuation.definition.string.js
              pop: true

        - match: \b(default|from|type)\b|\*
          scope: keyword.control.import.js

        - match: \,
          scope: punctuation.separator.js

        - include: import-member-definition

        - match: \{
          scope: punctuation.section.braces.begin.js
          push:
            - meta_content_scope: meta.braces.js

            - match: \}
              scope: punctuation.section.braces.end.js
              pop: true

            - include: import-member-definition

  export-statement:
    - match: \bexport\b
      scope: keyword.control.import.js
      push:
        - match: \bdefault\b
          scope: keyword.control.import.js
          pop: true

        - match: (?=\S)
          pop: true

  flow-type-definition-stop:
    - include: expression-stop

    - match: (?=\)|,)
      pop: true

  flow-type-polymorphic:
    - match: \<
      scope: punctuation.definition.generic.begin.js
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.js

        - match: \,
          scope: punctuation.separator.js

        - match: \>
          scope: punctuation.definition.generic.end.js
          pop: true

  flow-type-operator:
    - match: '&|\|'
      scope: keyword.operator.js

  flow-type-function-type:
    - match: '\((?=[^(]*\)\s*=>\s*)'
      scope: punctuation.section.parens.begin.js
      push:
        - meta_content_scope: meta.parens.js

        - match: \)
          scope: punctuation.section.parens.end.js
          set:
            - match: =>
              scope: storage.type.js
              set:
                - meta_content_scope: storage.type.js
                - include: flow-type-definition-stop
                - include: flow-type-definition

        - match: '{{identifier}}'
          scope: variable.parameter.js
          push:
            - match: ':'
              scope: punctuation.separator.js
              set:
                - meta_content_scope: storage.type.js

                - match: \,
                  scope: punctuation.separator.js
                  pop: true

                - match: (?=\))
                  pop: true

                - include: flow-type-definition

            - match: (?=\))
              pop: true


  flow-type-identifier:
    - match: \?
      scope: storage.modifier.js

    - match: '\b({{flowBuiltinTypes}})|{{identifier}}\b'
      captures:
        1: support.type.js

  flow-type-object:
    - match: \{
      scope: punctuation.section.braces.begin.js
      push:
        - meta_content_scope: meta.braces.js

        - match: \}
          scope: punctuation.section.braces.end.js
          pop: true

        - match: '{{identifier}}'
          scope: variable.other.member.js
          push:
            - match: \?
              scope: storage.modifier.js

            - match: ':'
              scope: punctuation.separator.js
              set:
                - meta_content_scope: storage.type.js

                - match: \,
                  scope: punctuation.separator.js
                  pop: true

                - match: (?=\})
                  pop: true

                - include: flow-type-definition

  flow-type-definition:
    - include: flow-type-function-type

    - match: \(
      scope: punctuation.section.parens.begin.js
      push:
        - meta_content_scope: meta.parens.js

        - match: \)
          scope: punctuation.section.parens.end.js
          pop: true

        - include: flow-type-definition

    - include: flow-type-identifier
    - include: flow-type-polymorphic
    - include: flow-type-object
    - include: flow-type-operator

  flow-type-declaration:
    - match: \btype\b
      scope: storage.type.js
      push:
        - meta_scope: meta.type.js

        - match: '{{identifier}}'
          scope: entity.name.type.js

        - include: flow-type-polymorphic

        - match: =
          scope: keyword.operator.assignment.js
          set:
            - meta_content_scope: meta.type.js storage.type.js
            - include: flow-type-definition-stop
            - include: flow-type-definition
